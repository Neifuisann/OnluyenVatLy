/**
 * Test script for AI features
 * Run this to test the AI integration
 */

const aiService = require('../api/services/ai/aiService');
const imageGenerationService = require('../api/services/ai/imageGenerationService');
const aiCacheService = require('../api/services/cache/aiCacheService');

async function testAIFeatures() {
    console.log('üß™ Testing AI Features...\n');

    // Test data
    const testLessonData = {
        title: 'Chuy·ªÉn ƒë·ªông th·∫≥ng ƒë·ªÅu',
        subject: 'V·∫≠t l√Ω',
        grade: '10',
        tags: ['c∆° h·ªçc', 'chuy·ªÉn ƒë·ªông'],
        questions: [
            {
                question: 'Chuy·ªÉn ƒë·ªông th·∫≥ng ƒë·ªÅu l√† chuy·ªÉn ƒë·ªông c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?',
                type: 'abcd'
            },
            {
                question: 'C√¥ng th·ª©c t√≠nh qu√£ng ƒë∆∞·ªùng trong chuy·ªÉn ƒë·ªông th·∫≥ng ƒë·ªÅu l√† g√¨?',
                type: 'abcd'
            }
        ]
    };

    try {
        // Test 1: AI Service Configuration
        console.log('1Ô∏è‚É£ Testing AI Service Configuration...');
        const config = aiService.validateConfiguration();
        if (config.isValid) {
            console.log('‚úÖ AI Service configuration is valid');
        } else {
            console.log('‚ùå AI Service configuration errors:', config.errors);
            return;
        }

        // Test 2: AI Connection
        console.log('\n2Ô∏è‚É£ Testing AI Connection...');
        const connection = await aiService.testConnection();
        if (connection.success) {
            console.log('‚úÖ AI connection successful:', connection.message);
        } else {
            console.log('‚ùå AI connection failed:', connection.message);
            return;
        }

        // Test 3: Lesson Summary Generation
        console.log('\n3Ô∏è‚É£ Testing Lesson Summary Generation...');
        try {
            const summary = await aiService.generateLessonSummary(testLessonData);
            console.log('‚úÖ Summary generated successfully:');
            console.log(`   "${summary}"`);
            console.log(`   Length: ${summary.length} characters`);
        } catch (error) {
            console.log('‚ùå Summary generation failed:', error.message);
        }

        // Test 4: Image Prompt Generation
        console.log('\n4Ô∏è‚É£ Testing Image Prompt Generation...');
        try {
            const imagePrompt = await aiService.generateImagePrompt(testLessonData);
            console.log('‚úÖ Image prompt generated successfully:');
            console.log(`   "${imagePrompt}"`);
        } catch (error) {
            console.log('‚ùå Image prompt generation failed:', error.message);
        }

        // Test 5: Question Explanation
        console.log('\n5Ô∏è‚É£ Testing Question Explanation...');
        try {
            const explanation = await aiService.generateQuestionExplanation(
                'Chuy·ªÉn ƒë·ªông th·∫≥ng ƒë·ªÅu l√† chuy·ªÉn ƒë·ªông c√≥ v·∫≠n t·ªëc kh√¥ng ƒë·ªïi',
                'ƒê√∫ng',
                'Sai'
            );
            console.log('‚úÖ Explanation generated successfully:');
            console.log(`   "${explanation}"`);
        } catch (error) {
            console.log('‚ùå Explanation generation failed:', error.message);
        }

        // Test 6: Image Generation Service (without actually generating)
        console.log('\n6Ô∏è‚É£ Testing Image Generation Service...');
        try {
            // Test URL generation only
            const testUrl = await imageGenerationService.generateWithPollinations(
                'Physics education illustration showing motion, clean modern style',
                { width: 400, height: 300 }
            );
            console.log('‚úÖ Image URL generated successfully:');
            console.log(`   ${testUrl}`);
            
            // Test URL validation
            const isValid = await imageGenerationService.validateImageUrl(testUrl);
            console.log(`‚úÖ Image URL validation: ${isValid ? 'Valid' : 'Invalid'}`);
        } catch (error) {
            console.log('‚ùå Image generation test failed:', error.message);
        }

        // Test 7: AI Caching
        console.log('\n7Ô∏è‚É£ Testing AI Caching...');
        try {
            // Generate cache key
            const cacheKey = aiCacheService.generateCacheKey('test', testLessonData);
            console.log(`‚úÖ Cache key generated: ${cacheKey}`);
            
            // Test cache set/get
            await aiCacheService.set('test', testLessonData, { result: 'test data' }, 60);
            const cachedData = await aiCacheService.get('test', testLessonData);
            
            if (cachedData && cachedData.fromCache) {
                console.log(`‚úÖ Cache set/get working, type: ${cachedData.cacheType}`);
            } else {
                console.log('‚ùå Cache not working properly');
            }
            
            // Get cache stats
            const stats = aiCacheService.getStats();
            console.log(`‚úÖ Cache stats: ${stats.memory.size} items, ${stats.memory.usage.toFixed(1)}% usage`);
        } catch (error) {
            console.log('‚ùå Caching test failed:', error.message);
        }

        // Test 8: Cost Calculation
        console.log('\n8Ô∏è‚É£ Testing Cost Calculation...');
        try {
            const costSavings = aiCacheService.calculateCostSavings('summary', 100);
            console.log('‚úÖ Cost calculation working:');
            console.log(`   Tokens avoided: ${costSavings.tokensAvoided}`);
            console.log(`   Estimated cost saved: $${costSavings.estimatedCostSaved.toFixed(6)}`);
        } catch (error) {
            console.log('‚ùå Cost calculation failed:', error.message);
        }

        console.log('\nüéâ AI Features testing completed!');
        console.log('\nüìù Summary:');
        console.log('   - AI Service: Configured and connected');
        console.log('   - Summary Generation: Working');
        console.log('   - Image Prompt Generation: Working');
        console.log('   - Question Explanations: Working');
        console.log('   - Image Generation Service: Ready');
        console.log('   - Caching System: Working');
        console.log('   - Cost Tracking: Working');

    } catch (error) {
        console.error('‚ùå Test failed with error:', error.message);
        console.error('Stack trace:', error.stack);
    }
}

// Run tests if this script is executed directly
if (require.main === module) {
    testAIFeatures().then(() => {
        console.log('\n‚úÖ Test script completed');
        process.exit(0);
    }).catch((error) => {
        console.error('\n‚ùå Test script failed:', error);
        process.exit(1);
    });
}

module.exports = { testAIFeatures };